{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","class","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","rows","backgroundColor","console","log","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","defaultProps","aboutText","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.8eac5dc3.chunk.js","sourcesContent":["import React from 'react';\r\nimport propTypes from 'prop-types';\r\n// import {a} from 'react-router-dom';\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div>\r\n\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a>\r\n              </li> */}\r\n            </ul>\r\n            {/* <form className=\"d-flex\" role=\"search\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form> */}\r\n            <div class={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n              <input className=\"form-check-input\" onClick = {props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n//setting the propTypes\r\nNavbar.propTypes = {\r\n  title: propTypes.string.isRequired,   // .string : It is for string type and isRequired: is used for the mandatory condition\r\n  aboutText: propTypes.string\r\n}\r\n\r\n// default props\r\nNavbar.defaultProps =\r\n{\r\n  title: 'Set title here',\r\n  aboutText: 'Set about here'\r\n}","import React,{useState} from 'react';\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleUpClick = () =>{\r\n        console.log(\"Upper case is clicked\"+text);\r\n        // setText(\"You have clicked on handleUpClick\");\r\n\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Upper Case\",\"success\");\r\n    }\r\n\r\n    const handleLoClick = () =>{\r\n        console.log(\"LowerCase is clicked\"+text);\r\n\r\n\r\n        let newText  = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lower Case\",\"success\");\r\n    }\r\n\r\n    const handleClear = ()=>{\r\n        let newText = \"\";\r\n        setText(newText);\r\n        props.showAlert(\"Text cleared\",\"success\");\r\n    }\r\n\r\n    const handleOnChange = (event) =>{\r\n        // console.log(\"On change\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const handleCopy = () =>{\r\n        console.log(\"I am copy\");\r\n        var text = document.getElementById('exampleForm');\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Copied to Clipboard\",\"success\");\r\n    }\r\n    const handleExtraSpace =() =>{\r\n        let newText = text.split(/[]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra Space removed\",\"success\");\r\n    }\r\n\r\n    const [text,setText] = useState('Enter text here');\r\n    return (\r\n        <>\r\n        <div className='container' style ={{color: props.mode==='dark'?'white':'black'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div class=\"mb-3\">\r\n                <textarea className=\"form-control\" value={text} onChange={handleOnChange} id=\"exampleForm\" rows=\"8\" style ={{backgroundColor: props.mode==='dark'?'grey':'white'}}></textarea>\r\n            </div>\r\n            <button className='btn btn-primary mx-2' onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className='btn btn-primary mx-2' onClick={handleLoClick}>Convert to Lowercase</button>\r\n            <button className='btn btn-primary mx-2' onClick={handleClear}>Clear the text</button>\r\n            <button className='btn btn-primary mx-2' onClick={handleCopy}>Copy text</button>\r\n            <button className='btn btn-primary mx-2' onClick={handleExtraSpace}>Remove Extra Space</button>\r\n            \r\n        \r\n        </div>\r\n\r\n        <div className=\"container my-2\">\r\n            <h1>Your text Summary</h1>\r\n            \r\n        {/*we are now counting the number of words and letters in the abouve textarea*/}\r\n            <p>This text contains {text.split(\" \").length} and {text.length} charaters</p>\r\n        \r\n        {/* time taken to read each word  and 0.008 is the time taken to read a single word*/ }\r\n        <h2>Time taken to read</h2>\r\n        <p>It will take {0.008 * text.split(\" \").length} Minutes to read</p>  \r\n\r\n        {/* for preview */}\r\n        <h2>Preview of the text</h2>\r\n        <p>{text.length>0 ? text:\"Enter something to preview it here\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n  const capitalize =(word) =>{\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  }\r\n  return (\r\n\r\n    // this syntax says that if props.alert if false then further command will not work and if it is true then next statement is also checked.\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n    <strong>{capitalize (props.alert.type)}</strong>: {props.alert.msg}\r\n  \r\n</div>\r\n  )\r\n}\r\n\r\nexport default Alert","// import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n// import About from './components/About';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n\n// import {\n//   // BrowserRouter as Router,\n//   Routes,\n//   Route,\n//   // Link,\n//   // Routes\n// } from \"react-router-dom\";\nfunction App() {\n  //whether dark mode is enabled or not\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  }\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      // document.body.style.color = 'white';\n      showAlert(\"Dark Mode has been enabled\", \"success\");\n      document.title = \"TextUtil- Light Mode\"\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light Mode has been enabled\", \"success\");\n      // document.body.style.color = 'black';\n      document.title = \"TextUtil- Dark Mode\"\n    }\n  }\n  return (\n    <>\n       \n        <Navbar title=\"Textutils\" aboutText=\"About us\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n\n          {/* <Routes>\n              <Route exact path=\"about\" element={<About />}/>    \n              <Route exact path=\"/\" element={<TextForm/>}/>                \n          </Routes> */}\n        <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode}/>\n\n        </div>\n        \n\n        \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// import { BrowserRouter as Router } from 'react-router-dom';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    {/* <Router> */}\n      <App />\n    {/* </Router> */}\n    \n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}